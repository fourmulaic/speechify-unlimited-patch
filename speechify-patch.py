import base64

patchScript = r""

original = ''
print('patching started...')
with open('./background.js', 'r+', encoding='utf-8') as file:
    original = file.read()
    if original.find("patched-!$DXm#TbyV7^fFf9Eh9xrbXd^398Wy") == -1:
        patchScript = "/*patched-!$DXm#TbyV7^fFf9Eh9xrbXd^398Wy*/" + \
            base64.b64decode(patchScript).decode('UTF-8') + original
        file.truncate(0)
        file.seek(0)
        file.write(patchScript)
        print("Successfully patched!")
        with open('./background-backup.js', 'w', encoding='utf-8') as backup:
            backup.write(original)
    else:
        print("Already patched!")
input('')
